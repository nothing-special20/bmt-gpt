version: "3.8"

services:
  db:
    image: postgres
    # persist data beyond lifetime of container
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=bmt_gpt
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
  redis:
    image: redis
    # persistent storage
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
  web:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/code
      - certs:/nginx/certs
      - static_volume:/home/app/web/static_files
      - postgres_backups:/var/lib/postgresql/backups/
    ports:
      - "8000:8000"
      - "3000:3000"
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
  celery:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: celery -A bmt_gpt worker -l INFO --beat --concurrency=6
    volumes:
      - .:/code
    env_file:
      - ./.env.docker
    depends_on:
      - db
      - redis
  nginx-proxy:
    container_name: nginx-proxy
    build:
      context: .
      dockerfile: nginx/Dockerfile
    restart: always
    ports:
      - 443:443
      - 80:80
    volumes:
      - ./static:/home/app/web/staticfiles
      - static_volume:/home/app/web/static_files
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - acme:/etc/acme.sh
    depends_on:
      - web
  nginx-proxy-letsencrypt:
    build:
      context: .
      dockerfile: letsencrypt-nginx/Dockerfile
    env_file:
      - .env.dev.proxy-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - acme:/etc/acme.sh
    depends_on:
      - nginx-proxy

volumes:
  postgres_data:
  redis_data:
  vhost:
  acme:
  html:
  static_volume:
  certs:
  postgres_backups:
